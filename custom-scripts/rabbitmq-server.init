#!/bin/sh
#
# rabbitmq-server RabbitMQ broker
#
# chkconfig: - 80 05
# description: Enable AMQP service provided by RabbitMQ
#

### BEGIN INIT INFO
# Provides:          rabbitmq-server
# Required-Start:    $remote_fs $network
# Required-Stop:     $remote_fs $network
# Description:       RabbitMQ broker
# Short-Description: Enable AMQP service provided by RabbitMQ broker
### END INIT INFO

export RABBITMQ_USER=${RABBITMQ_USER:-rabbitmq}
export RABBITMQ_PID_FILE=${RABBITMQ_PID_FILE:-/var/run/rabbitmq/pid}

PATH=/sbin:/usr/sbin:/bin:/usr/bin
NAME=rabbitmq-server
DAEMON=${RABBITMQ_HOME}/sbin/${NAME}
CONTROL=${RABBITMQ_HOME}/sbin/rabbitmqctl
DESC=rabbitmq-server
USER=$RABBITMQ_USER
ROTATE_SUFFIX=
INIT_LOG_DIR=${RABBITMQ_LOG_BASE:-/var/log/rabbitmq}
PID_FILE=$RABBITMQ_PID_FILE
LOCK_FILE=/var/lock/subsys/${RABBITMQ_NAME:-${NAME}}

test -x $DAEMON || exit 0
test -x $CONTROL || exit 0
cd ${RABBITMQ_TMP_BASE}

RETVAL=0
set -e

my_exec () {
    if [ `id -u` = `id -u ${RABBITMQ_USER}` ] ; then
        exec $1
    else
        su ${RABBITMQ_USER} -s /bin/sh -c "$1"
    fi
}

start_rabbitmq () {
    status_rabbitmq quiet
    if [ $RETVAL = 0 ] ; then
        echo RabbitMQ is currently running
    else
        RETVAL=0
        set +e
        my_exec "$DAEMON > ${INIT_LOG_DIR}/startup_log \
            2> ${INIT_LOG_DIR}/startup_err &"
        my_exec "$CONTROL wait $PID_FILE >/dev/null 2>&1"
        RETVAL=$?
        set -e
        case "$RETVAL" in
            0)
                echo SUCCESS
                if [ -n "$LOCK_FILE" ] ; then
                    touch $LOCK_FILE
                fi
                ;;
            *)
                rm -f $PID_FILE
                echo FAILED - check ${INIT_LOG_DIR}/startup_\{log, _err\}
                RETVAL=1
                ;;
        esac
    fi
}

stop_rabbitmq () {
    status_rabbitmq quiet
    if [ $RETVAL = 0 ] ; then
        set +e
        my_exec "$CONTROL stop > ${INIT_LOG_DIR}/shutdown_log 2> ${INIT_LOG_DIR}/shutdown_err"
        RETVAL=$?
        set -e
        if [ $RETVAL = 0 ] ; then
            rm -f $PID_FILE
            if [ -n "$LOCK_FILE" ] ; then
                rm -f $LOCK_FILE
            fi
        else
            echo FAILED - check ${INIT_LOG_DIR}/shutdown_log, _err
        fi
    else
        echo RabbitMQ is not running
        RETVAL=0
    fi
}

status_rabbitmq() {
    set +e
    if [ "$1" != "quiet" ] ; then
        my_exec "$CONTROL status 2>&1"
    else
        my_exec "$CONTROL status > /dev/null 2>&1"
    fi
    if [ $? != 0 ] ; then
        RETVAL=3
    fi
    set -e
}

rotate_logs_rabbitmq() {
    set +e
    my_exec "$CONTROL rotate_logs ${ROTATE_SUFFIX}"
    if [ $? != 0 ] ; then
        RETVAL=1
    fi
    set -e
}

restart_running_rabbitmq () {
    status_rabbitmq quiet
    if [ $RETVAL = 0 ] ; then
        restart_rabbitmq
    else
        echo RabbitMQ is not runnning
        RETVAL=0
    fi
}

restart_rabbitmq() {
    stop_rabbitmq
    start_rabbitmq
}

case "$1" in
    start)
        echo -n "Starting $DESC: "
        start_rabbitmq
        echo "$NAME."
        ;;
    stop)
        echo -n "Stopping $DESC: "
        stop_rabbitmq
        echo "$NAME."
        ;;
    status)
        status_rabbitmq
        ;;
    rotate-logs)
        echo -n "Rotating log files for $DESC: "
        rotate_logs_rabbitmq
        ;;
    force-reload|reload|restart)
        echo -n "Restarting $DESC: "
        restart_rabbitmq
        echo "$NAME."
        ;;
    try-restart)
        echo -n "Restarting $DESC: "
        restart_running_rabbitmq
        echo "$NAME."
        ;;
    *)
        echo "Usage: $0 {start|stop|status|rotate-logs|restart|condrestart|try-restart|reload|force-reload}" >&2
        RETVAL=1
        ;;
esac

exit $RETVAL
